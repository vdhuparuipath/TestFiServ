## To use this file:
## 1. Acquire a copy of this file
## 2. Create development and main branches if they do not exist
## 3. Update the ProcessName Variable to refer to the folder in which this document is located
## 4. Update the Trigger=>Paths=>Include value to refer to the folder in which this document is located
## 5. Create a pipeline under ADO=>Pipelines and select this file. Reference the file in main(no need to do this for the one in development)


## NOTE: The Include path is not compatible with variables and must be set directly 
## The Include path is necessary to allow each bot to be built only when the changes in the commit are relevant to that bot
## By separating each bot in the process into a subfolder, we can keep them together in Git while building and deploying them as distinct pieces
## By only building bots that are changed we can maintain the flexibility to update one, some or all of the bots without generating needless rebuilds and versions in other bots.
trigger:
  branches: 
    include: 
    - test-pipeline-preview
  paths:
    include:
    - RPA_INT-Test_Pipelines_Project-Performer/*
pool:
  vmImage: windows-latest


variables:
- name: ProcessName ## Setting this variable provides the name for use in paths, artifact names etc throughout the document.
  value: RPA_INT-Test_Pipelines_Project-Performer
- name: isMainCommit ## Setting this variable provides a condition so jobs can tell which branch triggered the run
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
- stage: BuildAndDeploy
  jobs:
  - job: BumpVersionNumber
    condition:  eq(variables.isMainCommit, 'false') ## only runs on non-main pushes, which means development since the trigger only watches that branch
    steps: 
    - checkout: self
      persistCredentials: true ## Allows use of git commands under the same authentication used by the checkout
      clean: true ## wipe the directory before pulling from git, prevents leftovers from causing weirdness

    ##Necessary to set git config for the push, checking out the branch makes sure we have an upstream to push version bumps 
    - task: Bash@3 
      inputs:
        targetType: 'inline'
        script: |
          git config --global user.email "RPADevs@dart.biz"
          git config --global user.name "Azure Pipelines"
          git fetch
          git checkout test-pipeline-preview

    ## Bump the version number
    ## Doing this allows us to have the Git Push effectively perform same function as Publish-to-Dev was in Studio
    - task: PowerShell@1
      name: getProcessVersion
      inputs:
        scriptType: 'inlineScript'
        inlineScript: |
          $projectObject = Get-Content '$(Build.SourcesDirectory)\$(ProcessName)\project.json'| ConvertFrom-Json
          $version = $projectObject.projectVersion 
          Write-Host "Initial Version:" $version
          $vArray = $version.split(".") 
          Write-Host "Version Array:" $vArray
          $newVersion= $vArray[0],$vArray[1],(([int]$vArray[2])+1) -join "."
          Write-Host "New Version:" $newVersion
          $projectObject.projectVersion = $newVersion
          $projectObject | ConvertTo-Json -depth 32 | set-content '$(Build.SourcesDirectory)\$(ProcessName)\project.json'
          Write-Host "##vso[task.setvariable variable=processVersion;]$newVersion" 

    ## Add the changed file to a commit, create a commit message, including the flag to prevent the commit from triggering build and starting a loop.
    ## Pull any changes(including version bumps from other folders) and push.
    - task: PowerShell@1
      condition:  eq(variables.isMainCommit, 'false')
      name: commitToGit
      inputs: 
        failOnStandardError: false
        scriptType: 'inlineScript'
        inlineScript: |
          git add *
          echo "Added"
          git commit -m "Azure Pipelines: Version Number Adjustment ***NO_CI***"
          echo "Committed"
          git pull
          echo "Pulled"
          git push 
          echo "Pushed"

  - job: PackAndPublish
    steps: 
    ##Get the project version
    - task: PowerShell@1
      name: GetVersion
      inputs:
        scriptType: 'inlineScript'
        inlineScript: |
          $projectObject = Get-Content '$(Build.SourcesDirectory)\$(ProcessName)\project.json'| ConvertFrom-Json
          $version = $projectObject.projectVersion 
          Write-Host "Project Version:" $version
          Write-Host "##vso[task.setvariable variable=processVersion;]$version" 

    # Install the platform
    - task: UiPathInstallPlatform-preview@3
      inputs:
        cliVersion: 'WIN_22.10.8438.32859'

    # Build the Package
    - task: UiPathPack@2
      inputs:
        versionType: 'CurrentVersion'
        projectJsonPath: '$(Build.SourcesDirectory)'
        orchestratorConnection: 'UiPath Dev Orchestrator'
        outputPath: '$(Build.ArtifactStagingDirectory)\Output'
        traceLevel: 'Warning'

      # Publish the package

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)\Output\$(ProcessName).$(processVersion).nupkg
        ArtifactName: '$(ProcessName)_Build'
        publishLocation: 'Container'

